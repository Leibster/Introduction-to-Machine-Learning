import numpy as np
from matplotlib.colors import ListedColormap


from sklearn.metrics import accuracy_score

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

import scipy as sp
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import Lasso
from sklearn.linear_model import Ridge
from sklearn.linear_model import ElasticNet

df_wine = pd.read_csv('https://archive.ics.uci.edu/'
                      'ml/machine-learning-databases/wine/wine.data',
                      header=None)

# if the Wine dataset is temporarily unavailable from the
# UCI machine learning repository, un-comment the following line
# of code to load the dataset from a local path:

# df_wine = pd.read_csv('wine.data', header=None)


df_wine.columns = ['Class label', 'Alcohol', 'Malic acid', 'Ash',
                   'Alcalinity of ash', 'Magnesium', 'Total phenols',
                   'Flavanoids', 'Nonflavanoid phenols', 'Proanthocyanins',
                   'Color intensity', 'Hue', 'OD280/OD315 of diluted wines',
                   'Proline']

print('Class labels', np.unique(df_wine['Class label']))
df_wine.head()
print(df_wine.head(5))
df_wine.describe(include='all')
print(df_wine.describe(include='all'))

cols = ['Class label', 'Alcohol', 'Malic acid', 'Ash',
                   'Alcalinity of ash', 'Magnesium', 'Total phenols',
                   'Flavanoids', 'Nonflavanoid phenols', 'Proanthocyanins',
                   'Color intensity', 'Hue', 'OD280/OD315 of diluted wines',
                   'Proline']
cols1 = ['Class label', 'Alcohol', 'Malic acid', 'Ash',
                   'Alcalinity of ash']



sns.pairplot(df_wine[cols1], size=2.5)
plt.tight_layout()
######### keep # plt.savefig('images/10_03.png', dpi=300)
plt.show()

cols2 = ['Class label', 
                   'Flavanoids', 'Nonflavanoid phenols', 'Proanthocyanins',
                   'Color intensity', 'Hue']


sns.pairplot(df_wine[cols2], size=2.5)
plt.tight_layout()
plt.show()

cols3 = ['Class label', 'Magnesium', 'Total phenols',
                    'OD280/OD315 of diluted wines',
                   'Proline']

sns.pairplot(df_wine[cols3], size=2.5)
plt.tight_layout()
plt.show()














X, y = df_wine.iloc[:, 1:].values, df_wine.iloc[:, 0].values

X_train, X_test, y_train, y_test =\
    train_test_split(X, y, 
                     test_size=0.2, 
                     random_state=42, 
                     stratify=y)
    
    
    
    
    
    
from sklearn.preprocessing import StandardScaler
stdsc = StandardScaler()
X_train_std = stdsc.fit_transform(X_train)
X_test_std = stdsc.transform(X_test)    
    


print('Labels counts in y:', np.bincount(y))
print('Labels counts in y_train:', np.bincount(y_train))
print('Labels counts in y_test:', np.bincount(y_test))

def plot_decision_regions(X, y, classifier, resolution=0.02):

    # setup marker generator and color map
    markers = ('s', 'x', 'o', '^', 'v')
    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')
    cmap = ListedColormap(colors[:len(np.unique(y))])

    # plot the decision surface
    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),
                           np.arange(x2_min, x2_max, resolution))
    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)
    Z = Z.reshape(xx1.shape)
    plt.contourf(xx1, xx2, Z, alpha=0.4, cmap=cmap)
    plt.xlim(xx1.min(), xx1.max())
    plt.ylim(xx2.min(), xx2.max())

    # plot class samples
    for idx, cl in enumerate(np.unique(y)):
        plt.scatter(x=X[y == cl, 0], 
                    y=X[y == cl, 1],
                    alpha=0.6, 
                    c=cmap(idx),
                    edgecolor='black',
                    marker=markers[idx], 
                    label=cl)




from sklearn.linear_model import LogisticRegression
#lr = LogisticRegression(C=100.0, random_state=1)
lr = LogisticRegression()
lr.fit(X_train_std, y_train)
#y_pred = lr.predict(X_test_std)




from sklearn import metrics
y_train_pred = lr.predict(X_train_std)
print( metrics.accuracy_score(y_train, y_train_pred) )
#0.821428571429


y_pred = lr.predict(X_test_std)
print( metrics.accuracy_score(y_test, y_pred) )

print( metrics.confusion_matrix(y_test, y_pred) )

#print('Misclassified samples: %d' % (y_test != y_pred).sum())
print('Accuracy Logistic Train: %.2f' % lr.score(X_train_std, y_train))
print('Accuracy Logistic Test: %.2f' % lr.score(X_test_std, y_test))


 




from sklearn.svm import SVC
#svm = SVC(kernel='linear', C=1.0, random_state=1)
svm = SVC()
svm.fit(X_train_std, y_train)

#y_pred = svm.predict(X_test_std)
print('Accuracy SVM Train: %.2f' % svm.score(X_train_std, y_train))
print('Accuracy SVM Test: %.2f' % svm.score(X_test_std, y_test))




### PCA part
from sklearn.decomposition import PCA
pca = PCA()
X_train_pca = pca.fit_transform(X_train_std)
pca.explained_variance_ratio_

plt.bar(range(1, 14), pca.explained_variance_ratio_, alpha=0.5, align='center')
plt.step(range(1, 14), np.cumsum(pca.explained_variance_ratio_), where='mid')
plt.ylabel('Explained variance ratio')
plt.xlabel('Principal components')

plt.show()


pca = PCA(n_components=2)
X_train_pca = pca.fit_transform(X_train_std)
X_test_pca = pca.transform(X_test_std)
plt.scatter(X_train_pca[:, 0], X_train_pca[:, 1])
plt.xlabel('PC 1')
plt.ylabel('PC 2')
plt.show()






        
        
pca = PCA(n_components=2)
X_train_pca = pca.fit_transform(X_train_std)
X_test_pca = pca.transform(X_test_std)

lr = LogisticRegression()
lr = lr.fit(X_train_pca, y_train)   

   
        
plot_decision_regions(X_train_pca, y_train, classifier=lr)
plt.xlabel('PC 1')
plt.ylabel('PC 2')
plt.legend(loc='lower left')
plt.tight_layout()
# plt.savefig('images/05_04.png', dpi=300)
plt.show()



plot_decision_regions(X_test_pca, y_test, classifier=lr)
plt.xlabel('PC 1')
plt.ylabel('PC 2')
plt.legend(loc='lower left')
plt.tight_layout()
# plt.savefig('images/05_05.png', dpi=300)
plt.show()        



print('Accuracy PCA Logistic Train: %.2f' % lr.score(X_train_pca, y_train))
print('Accuracy PCA Logistic Test: %.2f' % lr.score(X_test_pca, y_test))


#svm = SVC(kernel='linear', C=1.0, random_state=1)


svm = SVC()
svm.fit(X_train_pca, y_train)

plot_decision_regions(X_train_pca, y_train, classifier=svm)
plt.xlabel('PC 1')
plt.ylabel('PC 2')
plt.legend(loc='lower left')
plt.tight_layout()
# plt.savefig('images/05_04.png', dpi=300)
plt.show()



plot_decision_regions(X_test_pca, y_test, classifier=svm)
plt.xlabel('PC 1')
plt.ylabel('PC 2')
plt.legend(loc='lower left')
plt.tight_layout()
# plt.savefig('images/05_05.png', dpi=300)
plt.show()        


print('Accuracy PCA SVM Train: %.2f' % svm.score(X_train_pca, y_train))
print('Accuracy PCA SVM Test: %.2f' % svm.score(X_test_pca, y_test))





# Linear Discriminant Analysis (LDA)
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
lda = LDA(n_components=2)
X_train_lda = lda.fit_transform(X_train_std, y_train)

lr = LogisticRegression()
lr = lr.fit(X_train_lda, y_train)

plot_decision_regions(X_train_lda, y_train, classifier=lr)
plt.xlabel('LD 1')
plt.ylabel('LD 2')
plt.legend(loc='lower left')
plt.tight_layout()
# plt.savefig('images/05_09.png', dpi=300)
plt.show()

X_test_lda = lda.transform(X_test_std)
plot_decision_regions(X_test_lda, y_test, classifier=lr)
plt.xlabel('LD 1')
plt.ylabel('LD 2')
plt.legend(loc='lower left')
plt.tight_layout()
# plt.savefig('images/05_10.png', dpi=300)
plt.show()


print('Accuracy LDA Logistic Train: %.2f' % lr.score(X_train_lda, y_train))
print('Accuracy LDA Logistic Test: %.2f' % lr.score(X_test_lda, y_test))


svm = SVC()
svm.fit(X_train_lda, y_train)

plot_decision_regions(X_train_lda, y_train, classifier=svm)
plt.xlabel('LD 1')
plt.ylabel('LD 2')
plt.legend(loc='lower left')
plt.tight_layout()
# plt.savefig('images/05_04.png', dpi=300)
plt.show()



plot_decision_regions(X_test_lda, y_test, classifier=svm)
plt.xlabel('LD 1')
plt.ylabel('LD 2')
plt.legend(loc='lower left')
plt.tight_layout()
# plt.savefig('images/05_05.png', dpi=300)
plt.show()        


print('Accuracy LDA SVM Train: %.2f' % svm.score(X_train_lda, y_train))
print('Accuracy LDA SVM Test: %.2f' % svm.score(X_test_lda, y_test))

#KPCA
from sklearn.decomposition import KernelPCA as KCPA
#kpca = KCPA(n_components=2, kernel='rbf', gamma=5)
kpca = KCPA(n_components=2)
X_train_KPCA = kpca.fit_transform(X_train_std, y_train)

lr = LogisticRegression()
lr = lr.fit(X_train_KPCA, y_train)


plot_decision_regions(X_train_KPCA, y_train, classifier=lr)
plt.xlabel('PC 1')
plt.ylabel('PC 2')
plt.legend(loc='lower left')
plt.tight_layout()
# plt.savefig('images/05_09.png', dpi=300)
plt.show()


X_test_KPCA = lda.transform(X_test_std)
plot_decision_regions(X_test_KPCA, y_test, classifier=lr)
plt.xlabel('PC 1')
plt.ylabel('PC 2')
plt.legend(loc='lower left')
plt.tight_layout()
# plt.savefig('images/05_10.png', dpi=300)
plt.show()


print('Accuracy KPCA Logistic Train: %.2f' % lr.score(X_train_KPCA, y_train))
print('Accuracy KPCA Logistic Test: %.2f' % lr.score(X_test_KPCA, y_test))

svm = SVC()
svm.fit(X_train_KPCA, y_train)

plot_decision_regions(X_train_KPCA, y_train, classifier=svm)
plt.xlabel('PC 1')
plt.ylabel('PC 2')
plt.legend(loc='lower left')
plt.tight_layout()
# plt.savefig('images/05_04.png', dpi=300)
plt.show()



plot_decision_regions(X_test_KPCA, y_test, classifier=svm)
plt.xlabel('PC 1')
plt.ylabel('PC 2')
plt.legend(loc='lower left')
plt.tight_layout()
# plt.savefig('images/05_05.png', dpi=300)
plt.show()       

print('Accuracy KPCA SVM Train: %.2f' % svm.score(X_train_KPCA, y_train))
print('Accuracy KPCA SVM Test: %.2f' % svm.score(X_test_KPCA, y_test)) 

plt.figure(figsize=(75,18))
cm = np.corrcoef(df_wine[cols].values.T)
sns.set(font_scale=2)
hm = sns.heatmap(cm,
                 cbar=True,
                 annot=True,
                 square=True,
                 fmt='.2f',
                 annot_kws={'size': 15},
                 yticklabels=cols,
                 xticklabels=cols)

plt.tight_layout()
# plt.savefig('images/10_04.png', dpi=300)
plt.show()
print("My name is Alexander Ilnytsky")
print("My NetID is: ai9")
print("I hereby certify that I have read the University policy on Academic Integrity and that I am not in violation.")
